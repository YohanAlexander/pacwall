#!/bin/bash
set -e

# Default colors.
BACKGROUND='#282a36'
NODE='#ff5555'
ENODE='#ffb86c'
EDGE='#f8f8f2'
GSIZE="1366x768"

OUTPUT="pacwall.png"

STARTDIR="${PWD}"
WORKDIR="$HOME"'/.pacwall/'

PROGRESS_BAR_WIDTH=50  # progress bar length in characters

draw_progress_bar() {
  # Arguments: current value, max value, unit of measurement (optional)
  local __value=$1
  local __max=$2
  local __unit=${3:-""}  # if unit is not supplied, do not display it

  # Calculate percentage
  if (( $__max < 1 )); then __max=1; fi  # anti zero division protection
  local __percentage=$(( 100 - ($__max*100 - $__value*100) / $__max ))

  # Rescale the bar according to the progress bar width
  local __num_bar=$(( $__percentage * $PROGRESS_BAR_WIDTH / 100 ))

  # Draw progress bar
  printf "["
  for b in $(seq 1 $__num_bar); do printf "#"; done
  for s in $(seq 1 $(( $PROGRESS_BAR_WIDTH - $__num_bar ))); do printf " "; done
  printf "] $__percentage%% ($__value / $__max $__unit)\r"
}

prepare() {
    mkdir -p "$WORKDIR"
    mkdir -p "$WORKDIR"cksum
    mkdir -p "${WORKDIR}/"{stripped,raw}
    touch "${WORKDIR}/pkgcolors"
    cd "${WORKDIR}"
}

check_graph() {
CHECK="$(cksum ${WORKDIR}'stripped/'${EPKGS[package]} | awk '{print $1}')"
echo "${CHECK}" > "${WORKDIR}cksum/${EPKGS[package]}.check"
}

update_graph() {
# Mark each explicitly installed package using a distinct solid color.
echo "\"${EPKGS[package]}\" [color="\"$ENODE\"] >> pkgcolors
# Extract the list of edges from the output of pactree.
if( ( ! (debtree "${EPKGS[package]}" > "raw/${EPKGS[package]}") ) ) then
    return
fi
#echo "Updating package dependencies..."
debtree "${EPKGS[package]}" > "raw/${EPKGS[package]}"
sed -E \
    -e '/START/d' \
    -e '/^node/d' \
    -e '/\}/d' \
    -e '/arrowhead=none/d' \
    -e 's/\[.*\]//' \
    -e 's/>?=.*" ->/"->/' \
    -e 's/>?=.*"/"/' \
    -e '/->/!d' \
    "raw/${EPKGS[package]}" > "stripped/${EPKGS[package]}"
check_graph
}

generate_graph() {
    # Get a space-separated list of the explicitly installed packages.
    EPKGS="$(apt-mark showmanual | tr '\n' ' ')"
    EPKGS=($EPKGS)
    echo "Installed packages: ${#EPKGS[@]}"
    for package in ${!EPKGS[@]}
    do
        #echo "Package $package: ${EPKGS[package]}"
        check_graph
        #echo "Checksum: ${CHECK}"
        # if DOT version hasn't ever been created, or it changed, then
        # make conversion and store the checksum.
        if [[ ( ! ( "${CHECK}" == "$(cat ${WORKDIR}'cksum/'${EPKGS[package]}'.check')" ) ) ]] ; then
            update_graph
        elif [[ ( ! ( -f ${WORKDIR}'stripped/'${EPKGS[package]} ) ) ]] ; then
            update_graph
        else
            continue
        fi

        # Get current value of packages
        curr=$package

        # Draw a progress bar
        draw_progress_bar $curr ${#EPKGS[@]}

        # Check if we reached 100%
        if [ $curr == ${#EPKGS[@]} ]; then break; fi
        sleep 1  # Wait before redrawing

    done
        # Go to the newline at the end
        printf "\n"
}

compile_graph() {
    # Compile the file in DOT languge.
    # The graph is directed and strict (doesn't contain any edge duplicates).
    cd stripped
    echo 'strict digraph G {' > ../pacwall.gv
    cat ../pkgcolors ${EPKGS} >> ../pacwall.gv
    echo '}' >> ../pacwall.gv
    cd ..
}

render_graph() {
    # Style the graph according to preferences.
    declare -a twopi_args=(
        '-Tpng' 'pacwall.gv'
        "-Gbgcolor=${BACKGROUND}"
        "-Ecolor=${EDGE}"
        "-Ncolor=${NODE}"
        '-Nshape=point'
        '-Nheight=0.1'
        '-Nwidth=0.1'
        '-Earrowhead=normal'
    )

    # Optional arguments
    if [ -n "${GSIZE}" ]; then
        twopi_args+=("-Gsize=${GSIZE}")
    fi

    twopi "${twopi_args[@]}" > "${OUTPUT}"
}

resize_wallpaper() {
    # Use imagemagick to resize the image to the size of the screen.
    SCREEN_SIZE=$(xdpyinfo | grep dimensions | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\1/')
    convert "${OUTPUT}" \
        -gravity center \
        -background "${BACKGROUND}" \
        -extent "${SCREEN_SIZE}" \
        "${OUTPUT}"
}

set_wallpaper() {
    set +e
    gsettings set org.gnome.desktop.background picture-uri "${STARTDIR}/${OUTPUT}" \
        2> /dev/null && echo 'Set the wallpaper using gsettings.'
    feh --bg-center --no-fehbg "${STARTDIR}/${OUTPUT}" \
        2> /dev/null && echo 'Set the wallpaper using feh.'
    set -e
}

main() {
    echo 'Preparing the environment...'
    prepare

    echo 'Generating the graph...'
    generate_graph 2> /dev/null

    echo 'Compiling the graph...'
    compile_graph

    echo 'Rendering it...'
    render_graph

    resize_wallpaper

    cp "${WORKDIR}/${OUTPUT}" "${STARTDIR}"

    set_wallpaper

    echo 'The image has been put into the current directory.'
    echo 'Done.'
}

help() {
    printf "%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n\t%s\n" \
        "USAGE: $0" \
        "[ -b BACKGROUND ]" \
        "[ -d NODE_COLOR ]" \
        "[ -e EXPLICIT_NODE_COLOR ]" \
        "[ -s EDGE_COLOR ]" \
        "[ -g GSIZE ]" \
        "[ -o OUTPUT ]"
        exit 0
}

options=':b:d:s:e:g:o:h'
while getopts $options option
do
    case $option in
        b  ) BACKGROUND=${OPTARG};;
        d  ) NODE=${OPTARG};;
        e  ) ENODE=${OPTARG};;
        s  ) EDGE=${OPTARG};;
        g  ) GSIZE=${OPTARG};;
        o  ) OUTPUT=${OPTARG};;
        h  ) help;;
        \? ) echo "Unknown option: -${OPTARG}" >&2; exit 1;;
        :  ) echo "Missing option argument for -${OPTARG}" >&2; exit 1;;
        *  ) echo "Unimplemented option: -${OPTARG}" >&2; exit 1;;
    esac
done

shift $((OPTIND - 1))

main
